"""
Flask API Backend cho Face Recognition
C√†i ƒë·∫∑t:
pip install flask flask-cors face_recognition opencv-python pillow firebase-admin
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import face_recognition
import numpy as np
import base64
from io import BytesIO
from PIL import Image
import firebase_admin
from firebase_admin import credentials, firestore, storage
import os
from datetime import datetime, timedelta

app = Flask(__name__)
CORS(app)  # Cho ph√©p frontend g·ªçi API

# Kh·ªüi t·∫°o Firebase Admin
import os
cred_path = os.environ.get('FIREBASE_CREDENTIALS', 'firebase-key.json')
cred = credentials.Certificate(cred_path)
firebase_admin.initialize_app(cred, {
    'storageBucket': 'face-timekeeping-31820.firebasestorage.app'
})

db = firestore.client()
bucket = storage.bucket()

# Cache khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω trong memory
registered_faces = {}

def base64_to_image(base64_string):
    """Chuy·ªÉn ƒë·ªïi base64 string sang numpy array"""
    # Lo·∫°i b·ªè header n·∫øu c√≥
    if ',' in base64_string:
        base64_string = base64_string.split(',')[1]
    
    image_data = base64.b64decode(base64_string)
    image = Image.open(BytesIO(image_data))
    return np.array(image)

def load_registered_faces():
    """T·∫£i t·∫•t c·∫£ khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω t·ª´ Firebase"""
    global registered_faces
    registered_faces = {}
    
    employees = db.collection('employees').stream()
    for emp in employees:
        data = emp.to_dict()
        name = data['name']
        descriptor = np.array(data['descriptor'])
        registered_faces[name] = descriptor
    
    print(f"‚úÖ ƒê√£ t·∫£i {len(registered_faces)} nh√¢n vi√™n")

@app.route('/api/health', methods=['GET'])
def health_check():
    """Ki·ªÉm tra API ho·∫°t ƒë·ªông"""
    return jsonify({
        'status': 'ok',
        'registered_employees': len(registered_faces)
    })

@app.route('/api/detect', methods=['POST'])
def detect_face():
    """
    Ph√°t hi·ªán khu√¥n m·∫∑t trong ·∫£nh
    Input: { "image": "base64_string" }
    Output: { "faces_detected": int, "locations": [...] }
    """
    try:
        data = request.json
        image_base64 = data.get('image')
        
        if not image_base64:
            return jsonify({'error': 'Thi·∫øu ·∫£nh'}), 400
        
        # Chuy·ªÉn ƒë·ªïi v√† ph√°t hi·ªán
        image = base64_to_image(image_base64)
        face_locations = face_recognition.face_locations(image)
        
        return jsonify({
            'faces_detected': len(face_locations),
            'locations': face_locations
        })
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/recognize', methods=['POST'])
def recognize_face():
    """
    Nh·∫≠n di·ªán khu√¥n m·∫∑t
    Input: { "image": "base64_string" }
    Output: { "name": "...", "confidence": 0.95, "distance": 0.4 }
    """
    try:
        data = request.json
        image_base64 = data.get('image')
        threshold = data.get('threshold', 0.6)
        
        if not image_base64:
            return jsonify({'error': 'Thi·∫øu ·∫£nh'}), 400
        
        # Chuy·ªÉn ƒë·ªïi ·∫£nh
        image = base64_to_image(image_base64)
        
        # Ph√°t hi·ªán v√† m√£ h√≥a khu√¥n m·∫∑t
        face_locations = face_recognition.face_locations(image)
        
        if len(face_locations) == 0:
            return jsonify({'name': None, 'message': 'Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t'})
        
        face_encodings = face_recognition.face_encodings(image, face_locations)
        
        if len(face_encodings) == 0:
            return jsonify({'name': None, 'message': 'Kh√¥ng th·ªÉ m√£ h√≥a khu√¥n m·∫∑t'})
        
        # So s√°nh v·ªõi database
        face_encoding = face_encodings[0]
        best_match = None
        min_distance = threshold
        
        for name, known_encoding in registered_faces.items():
            distance = face_recognition.face_distance([known_encoding], face_encoding)[0]
            if distance < min_distance:
                min_distance = distance
                best_match = name
        
        if best_match:
            confidence = 1 - min_distance
            return jsonify({
                'name': best_match,
                'confidence': round(confidence, 3),
                'distance': round(min_distance, 3),
                'location': face_locations[0]
            })
        else:
            return jsonify({
                'name': None,
                'message': 'Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c',
                'min_distance': round(min_distance, 3)
            })
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/register', methods=['POST'])
def register_face():
    """
    ƒêƒÉng k√Ω khu√¥n m·∫∑t m·ªõi
    Input: { "name": "...", "image": "base64_string" }
    Output: { "success": true, "message": "..." }
    """
    try:
        data = request.json
        name = data.get('name')
        image_base64 = data.get('image')
        
        if not name or not image_base64:
            return jsonify({'error': 'Thi·∫øu t√™n ho·∫∑c ·∫£nh'}), 400
        
        # Chuy·ªÉn ƒë·ªïi ·∫£nh
        image = base64_to_image(image_base64)
        
        # Ph√°t hi·ªán v√† m√£ h√≥a
        face_locations = face_recognition.face_locations(image)
        
        if len(face_locations) == 0:
            return jsonify({'error': 'Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t trong ·∫£nh'}), 400
        
        if len(face_locations) > 1:
            return jsonify({'error': 'Ph√°t hi·ªán nhi·ªÅu h∆°n 1 khu√¥n m·∫∑t. Vui l√≤ng ch·ªâ c√≥ 1 ng∆∞·ªùi trong ·∫£nh'}), 400
        
        face_encodings = face_recognition.face_encodings(image, face_locations)
        
        if len(face_encodings) == 0:
            return jsonify({'error': 'Kh√¥ng th·ªÉ m√£ h√≥a khu√¥n m·∫∑t'}), 400
        
        face_encoding = face_encodings[0]
        
        # L∆∞u v√†o Firebase
        db.collection('employees').document(name).set({
            'name': name,
            'descriptor': face_encoding.tolist(),
            'createdAt': firestore.SERVER_TIMESTAMP
        })
        
        # C·∫≠p nh·∫≠t cache
        registered_faces[name] = face_encoding
        
        return jsonify({
            'success': True,
            'message': f'ƒê√£ ƒëƒÉng k√Ω th√†nh c√¥ng: {name}',
            'total_employees': len(registered_faces)
        })
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/employees', methods=['GET'])
def get_employees():
    """L·∫•y danh s√°ch nh√¢n vi√™n"""
    return jsonify({
        'employees': list(registered_faces.keys()),
        'total': len(registered_faces)
    })

@app.route('/api/employees/<name>', methods=['DELETE'])
def delete_employee(name):
    """X√≥a nh√¢n vi√™n"""
    try:
        if name not in registered_faces:
            return jsonify({'error': 'Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i'}), 404
        
        # X√≥a t·ª´ Firebase
        db.collection('employees').document(name).delete()
        
        # X√≥a t·ª´ cache
        del registered_faces[name]
        
        return jsonify({
            'success': True,
            'message': f'ƒê√£ x√≥a: {name}',
            'remaining': len(registered_faces)
        })
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/attendance', methods=['POST'])
def check_attendance():
    """
    Ch·∫•m c√¥ng
    Input: { "name": "...", "is_auto": true/false }
    Output: { "success": true, "message": "..." }
    """
    try:
        data = request.json
        name = data.get('name')
        is_auto = data.get('is_auto', False)
        
        if not name:
            return jsonify({'error': 'Thi·∫øu t√™n nh√¢n vi√™n'}), 400
        
        # Ki·ªÉm tra th·ªùi gian ch·ªù
        settings = db.collection('settings').document('attendance').get()
        if settings.exists:
            config = settings.to_dict()
            cooldown = config.get('cooldownMinutes', 30)
        else:
            cooldown = 30
        
        # Ki·ªÉm tra l·∫ßn ch·∫•m c√¥ng g·∫ßn nh·∫•t
        recent = db.collection('attendance')\
            .where('name', '==', name)\
            .order_by('timestamp', direction=firestore.Query.DESCENDING)\
            .limit(1)\
            .get()
        
        if recent:
            last_time = recent[0].to_dict()['timestamp']
            time_diff = datetime.now() - last_time
            
            if time_diff < timedelta(minutes=cooldown):
                remaining = cooldown - int(time_diff.total_seconds() / 60)
                return jsonify({
                    'success': False,
                    'message': f'ƒê√£ ch·∫•m c√¥ng r·ªìi! Vui l√≤ng ch·ªù {remaining} ph√∫t n·ªØa'
                }), 400
        
        # L∆∞u ch·∫•m c√¥ng
        db.collection('attendance').add({
            'name': name,
            'type': 'checkin',
            'isAuto': is_auto,
            'timestamp': firestore.SERVER_TIMESTAMP
        })
        
        return jsonify({
            'success': True,
            'message': f'Ch·∫•m c√¥ng th√†nh c√¥ng: {name}'
        })
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/reload', methods=['POST'])
def reload_faces():
    """T·∫£i l·∫°i danh s√°ch khu√¥n m·∫∑t t·ª´ Firebase"""
    try:
        load_registered_faces()
        return jsonify({
            'success': True,
            'total': len(registered_faces)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ ƒêang kh·ªüi ƒë·ªông Face Recognition API...")
    print("üì¶ ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Firebase...")
    load_registered_faces()
    print("‚úÖ S·∫µn s√†ng!")
    
    # L·∫•y PORT t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Render y√™u c·∫ßu)
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)